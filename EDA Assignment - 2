
Flight Price
'''Q1. Load the flight price dataset and examine its dimensions. How many rows and columns does the
dataset have?'''
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
df=pd.read_excel("Cleaned Flight Data.xlsx")
print(f'The dataset consist of respective rows and columns {df.shape}')
The dataset consist of respective rows and columns (10683, 35)
df.head(2)
Airline	Source	Destination	Total_Stops	Additional_Info	Price	Date	Month	Year	Arrival_hour	...	Additional_Info_1 Long layover.1	Additional_Info_1 Short layover.1	Additional_Info_2 Long layover.1	Additional_Info_Business class.1	Additional_Info_Change airports.1	Additional_Info_In-flight meal not included.1	Additional_Info_No Info.1	Additional_Info_No check-in baggage included.1	Additional_Info_No info.1	Additional_Info_Red-eye flight.1
0	IndiGo	Banglore	New Delhi	0	No info	3897	24	3	2019	1	...	0	0	0	0	0	0	0	0	1	0
1	Air India	Kolkata	Banglore	2	No info	7662	1	5	2019	13	...	0	0	0	0	0	0	0	0	1	0
2 rows × 35 columns

'''Q2. What is the distribution of flight prices in the dataset? Create a histogram to visualize the
distribution'''

df["Price"].plot(kind="hist",bins=50) 
<Axes: ylabel='Frequency'>

df.tail(2)
Airline	Source	Destination	Total_Stops	Additional_Info	Price	Date	Month	Year	Arrival_hour	...	Additional_Info_1 Long layover.1	Additional_Info_1 Short layover.1	Additional_Info_2 Long layover.1	Additional_Info_Business class.1	Additional_Info_Change airports.1	Additional_Info_In-flight meal not included.1	Additional_Info_No Info.1	Additional_Info_No check-in baggage included.1	Additional_Info_No info.1	Additional_Info_Red-eye flight.1
10681	Vistara	Banglore	New Delhi	0	No info	12648	1	3	2019	14	...	0	0	0	0	0	0	0	0	1	0
10682	Air India	Delhi	Cochin	2	No info	11753	9	5	2019	19	...	0	0	0	0	0	0	0	0	1	0
2 rows × 35 columns

'''Q3. What is the range of prices in the dataset? What is the minimum and maximum price?'''
print(f'The range of Prices is {df["Price"].max()-df["Price"].min()}')
print(f'The maximum price is {df["Price"][len(df["Price"])-1]} and the minimum price is {df["Price"][0]}') 

#the index of last row is 10682 but the len will be 10683 so we have to subtract 1 from len as index starts from 0
The range of Prices is 77753
The maximum price is 11753 and the minimum price is 3897
'''Q4. How does the price of flights vary by airline? Create a boxplot to compare the prices of different
airlines.'''
try:
    df["Price"].groupby(df["Airline"]).plot(kind="box",figsize=(10,5))
except:
    print("Error")
Error

'''Q5. Are there any outliers in the dataset? Identify any potential outliers using a boxplot and describe how
they may impact your analysis.'''
#Yes there are outliers in the dataset as we can see in the above boxplot
#to identify the outliers we can use the z-score method
from scipy import stats
# Select only the numeric columns from the DataFrame
numeric_columns = df.select_dtypes(include=np.number)
z_scores = np.abs(stats.zscore(numeric_columns))
outlier_threshold=2.5
outlier_index=np.where(z_scores>outlier_threshold)
print(outlier_index)
(array([    7,    45,    45,    79,    79,    96,    96,   123,   195,
         195,   228,   228,   243,   243,   316,   316,   322,   322,
         361,   361,   373,   373,   387,   387,   395,   395,   396,
         402,   424,   424,   447,   447,   486,   510,   515,   523,
         523,   547,   547,   597,   628,   655,   655,   657,   705,
         705,   751,   751,   771,   771,   785,   785,   785,   795,
         795,   826,   877,   877,   878,   878,   919,   922,   922,
         936,   946,   957,   957,   959,   960,   960,   965,   965,
         975,  1039,  1039,  1043,  1043,  1059,  1059,  1066,  1066,
        1074,  1077,  1077,  1145,  1196,  1211,  1211,  1218,  1235,
        1235,  1240,  1240,  1246,  1327,  1327,  1341,  1353,  1378,
        1378,  1394,  1394,  1423,  1423,  1424,  1427,  1427,  1434,
        1434,  1466,  1472,  1472,  1478,  1535,  1535,  1572,  1572,
        1580,  1580,  1618,  1618,  1621,  1621,  1629,  1641,  1641,
        1652,  1652,  1654,  1665,  1710,  1710,  1712,  1712,  1718,
        1718,  1719,  1719,  1763,  1763,  1781,  1781,  1785,  1824,
        1828,  1865,  1865,  1916,  1916,  1918,  1928,  1928,  1949,
        1949,  1992,  1992,  2042,  2042,  2055,  2056,  2056,  2072,
        2072,  2079,  2079,  2099,  2102,  2102,  2108,  2113,  2113,
        2127,  2145,  2145,  2151,  2151,  2159,  2159,  2172,  2192,
        2192,  2212,  2212,  2255,  2255,  2328,  2328,  2340,  2340,
        2405,  2405,  2405,  2415,  2415,  2426,  2426,  2446,  2446,
        2453,  2453,  2481,  2481,  2484,  2484,  2495,  2495,  2495,
        2496,  2496,  2526,  2526,  2556,  2556,  2556,  2587,  2587,
        2591,  2614,  2614,  2616,  2616,  2618,  2623,  2632,  2632,
        2633,  2633,  2635,  2691,  2692,  2692,  2693,  2712,  2712,
        2718,  2724,  2724,  2775,  2775,  2814,  2817,  2817,  2822,
        2844,  2844,  2868,  2868,  2870,  2870,  2883,  2883,  2893,
        2893,  2924,  2924,  2924,  2963,  2963,  3017,  3017,  3032,
        3032,  3032,  3111,  3111,  3111,  3123,  3123,  3157,  3158,
        3158,  3220,  3257,  3289,  3289,  3294,  3317,  3317,  3354,
        3362,  3362,  3400,  3407,  3407,  3408,  3408,  3413,  3413,
        3454,  3454,  3496,  3505,  3505,  3509,  3509,  3517,  3517,
        3526,  3526,  3531,  3531,  3535,  3535,  3535,  3549,  3549,
        3554,  3554,  3555,  3555,  3556,  3556,  3568,  3572,  3572,
        3577,  3577,  3584,  3686,  3686,  3700,  3700,  3700,  3711,
        3711,  3714,  3714,  3725,  3725,  3740,  3740,  3746,  3746,
        3760,  3760,  3788,  3788,  3815,  3851,  3871,  3871,  3945,
        3953,  3953,  3954,  3985,  3985,  4012,  4032,  4032,  4057,
        4057,  4062,  4068,  4068,  4083,  4083,  4118,  4142,  4157,
        4157,  4158,  4214,  4214,  4399,  4399,  4413,  4413,  4461,
        4461,  4463,  4469,  4469,  4504,  4504,  4521,  4521,  4521,
        4534,  4534,  4536,  4536,  4562,  4562,  4595,  4595,  4605,
        4605,  4613,  4613,  4655,  4660,  4660,  4671,  4671,  4676,
        4700,  4700,  4753,  4753,  4760,  4765,  4829,  4869,  4869,
        4894,  4894,  4914,  4914,  4930,  4930,  4971,  4971,  5013,
        5013,  5013,  5047,  5047,  5050,  5072,  5086,  5086,  5136,
        5162,  5206,  5206,  5223,  5223,  5241,  5241,  5248,  5248,
        5272,  5272,  5293,  5320,  5320,  5327,  5327,  5351,  5351,
        5361,  5361,  5372,  5372,  5372,  5374,  5374,  5389,  5389,
        5423,  5423,  5439,  5446,  5454,  5454,  5463,  5463,  5506,
        5506,  5512,  5512,  5523,  5628,  5628,  5662,  5701,  5702,
        5702,  5710,  5719,  5738,  5741,  5741,  5742,  5742,  5745,
        5754,  5754,  5770,  5770,  5788,  5788,  5832,  5832,  5834,
        5834,  5838,  5850,  5856,  5886,  5886,  5899,  5899,  5940,
        5940,  5947,  5956,  5956,  5971,  5971,  5980,  5986,  5996,
        6013,  6013,  6014,  6014,  6024,  6024,  6031,  6031,  6045,
        6045,  6060,  6060,  6098,  6098,  6142,  6142,  6156,  6156,
        6217,  6217,  6220,  6220,  6276,  6276,  6314,  6334,  6334,
        6336,  6336,  6407,  6419,  6419,  6427,  6427,  6444,  6461,
        6461,  6462,  6462,  6483,  6483,  6519,  6519,  6526,  6571,
        6571,  6576,  6576,  6576,  6584,  6584,  6588,  6599,  6605,
        6656,  6656,  6687,  6687,  6713,  6713,  6720,  6720,  6791,
        6791,  6809,  6809,  6835,  6839,  6839,  6844,  6848,  6848,
        6884,  6888,  6888,  6901,  6990,  6990,  6991,  6998,  6998,
        7001,  7012,  7012,  7018,  7018,  7031,  7042,  7042,  7089,
        7089,  7092,  7092,  7098,  7098,  7120,  7174,  7174,  7200,
        7200,  7218,  7218,  7247,  7247,  7249,  7284,  7284,  7285,
        7285,  7292,  7292,  7323,  7323,  7351,  7356,  7367,  7367,
        7377,  7378,  7378,  7480,  7480,  7518,  7518,  7519,  7519,
        7537,  7554,  7560,  7560,  7579,  7579,  7586,  7608,  7608,
        7617,  7626,  7669,  7669,  7671,  7671,  7713,  7723,  7723,
        7724,  7724,  7724,  7752,  7756,  7787,  7787,  7823,  7823,
        7835,  7835,  7838,  7838,  7839,  7839,  7858,  7858,  7876,
        7902,  7932,  7932,  7956,  7956,  8002,  8002,  8020,  8080,
        8122,  8122,  8153,  8199,  8199,  8204,  8223,  8223,  8252,
        8252,  8282,  8282,  8306,  8306,  8395,  8395,  8448,  8448,
        8451,  8467,  8467,  8470,  8513,  8513,  8517,  8517,  8528,
        8528,  8536,  8544,  8544,  8552,  8552,  8560,  8560,  8598,
        8601,  8621,  8639,  8639,  8727,  8727,  8728,  8728,  8729,
        8739,  8739,  8748,  8748,  8760,  8760,  8768,  8768,  8772,
        8772,  8775,  8775,  8830,  8830,  8856,  8897,  8897,  8912,
        8922,  8922,  8940,  8942,  8942,  8943,  8943,  8957,  8957,
        8957,  8971,  8971,  8987,  8990,  9001,  9001,  9019,  9019,
        9019,  9025,  9025,  9029,  9044,  9055,  9058,  9058,  9085,
        9085,  9142,  9142,  9154,  9154,  9182,  9182,  9182,  9193,
        9220,  9220,  9239,  9266,  9303,  9307,  9307,  9308,  9308,
        9320,  9320,  9346,  9346,  9353,  9353,  9356,  9356,  9366,
        9366,  9372,  9373,  9373,  9407,  9407,  9454,  9479,  9479,
        9484,  9514,  9514,  9556,  9569,  9597,  9597,  9626,  9626,
        9629,  9629,  9632,  9634,  9634,  9643,  9643,  9657,  9657,
        9689,  9715,  9761,  9761,  9815,  9815,  9863,  9863,  9864,
        9864,  9905,  9905,  9930,  9972,  9972,  9974,  9984,  9984,
        9995,  9995, 10010, 10010, 10052, 10074, 10074, 10076, 10076,
       10109, 10109, 10111, 10111, 10113, 10149, 10149, 10160, 10182,
       10189, 10212, 10212, 10223, 10223, 10305, 10305, 10307, 10307,
       10327, 10327, 10351, 10353, 10364, 10364, 10364, 10383, 10405,
       10405, 10407, 10407, 10417, 10417, 10433, 10433, 10439, 10456,
       10511, 10511, 10511, 10519, 10519, 10534, 10534, 10561, 10568,
       10568, 10593, 10593, 10604, 10604, 10639, 10654, 10654, 10668,
       10677, 10677], dtype=int64), array([ 1, 17, 27, 17, 27, 17, 27,  1, 17, 27, 17, 27, 17, 27, 17, 27, 17,
       27, 17, 27, 17, 27, 17, 27, 17, 27,  1,  0, 17, 27, 17, 27,  1,  1,
        1, 17, 27, 17, 27,  1,  1, 17, 27,  1, 17, 27, 17, 27, 17, 27,  1,
       11, 21, 16, 26,  1, 17, 27, 17, 27,  0, 17, 27,  1,  1, 17, 27,  1,
       17, 27, 17, 27,  1, 17, 27, 10, 20, 17, 27, 17, 27,  1, 17, 27,  1,
        1, 17, 27,  0, 17, 27, 17, 27,  1, 17, 27,  1,  1, 17, 27, 17, 27,
       17, 27,  1, 17, 27, 17, 27,  1, 17, 27,  1, 17, 27, 17, 27, 17, 27,
       17, 27, 17, 27,  1, 17, 27, 17, 27,  1,  0, 17, 27, 14, 24, 17, 27,
       17, 27, 17, 27, 17, 27,  1,  1,  1, 17, 27, 17, 27,  1, 17, 27, 17,
       27, 17, 27, 17, 27,  1, 17, 27, 17, 27, 10, 20,  1, 17, 27,  1, 17,
       27,  1, 17, 27, 17, 27, 17, 27,  0, 17, 27, 16, 26, 17, 27, 17, 27,
       17, 27,  1, 10, 20, 17, 27, 17, 27, 17, 27, 17, 27, 10, 20, 17, 27,
        1, 10, 20, 17, 27, 17, 27,  1, 10, 20, 17, 27,  1, 17, 27, 17, 27,
        1,  0, 17, 27,  0,  1,  1,  1, 17, 27,  1, 17, 27,  0, 17, 27, 17,
       27,  0, 17, 27,  0, 17, 27, 17, 27, 17, 27, 14, 24, 17, 27,  1, 13,
       23, 17, 27, 17, 27,  1, 13, 23,  1, 10, 20, 17, 27,  0, 17, 27,  0,
        1, 17, 27,  1,  0,  1,  1, 17, 27,  1, 17, 27, 17, 27, 17, 27, 17,
       27,  0, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,  1, 14, 24, 17, 27,
       17, 27, 17, 27, 17, 27,  0, 17, 27, 17, 27,  0, 17, 27,  1, 10, 20,
       17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 10, 20,  0,  1, 17,
       27,  0, 17, 27,  1, 17, 27,  1, 17, 27, 17, 27,  1, 17, 27, 17, 27,
        0,  1, 17, 27,  1, 17, 27, 17, 27, 17, 27, 17, 27,  0, 17, 27, 17,
       27,  1, 10, 20, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,  0,
       17, 27, 17, 27,  1, 17, 27, 17, 27,  0,  1,  1, 17, 27, 17, 27, 17,
       27, 17, 27, 17, 27,  1, 10, 20, 17, 27,  0,  1, 17, 27,  1,  1, 17,
       27, 17, 27, 17, 27, 17, 27, 17, 27,  1, 17, 27, 17, 27, 17, 27, 17,
       27,  1, 13, 23, 17, 27, 17, 27, 17, 27,  1,  0, 17, 27, 17, 27, 17,
       27, 17, 27,  1, 10, 20,  1,  1, 17, 27,  1,  1,  1, 17, 27, 17, 27,
        1, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,  0,  1,  1, 17, 27, 17,
       27, 17, 27,  0, 17, 27, 17, 27,  1,  1,  0, 17, 27, 17, 27, 10, 20,
       17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17,
       27,  1, 17, 27, 10, 20,  1, 17, 27, 17, 27,  0, 17, 27, 17, 27, 17,
       27, 17, 27,  1, 17, 27,  1, 10, 20, 17, 27,  1,  0,  1, 17, 27, 17,
       27, 17, 27, 17, 27, 17, 27, 17, 27,  1, 17, 27,  1, 17, 27,  0, 17,
       27,  1, 17, 27,  1, 17, 27,  0, 17, 27, 17, 27,  0, 17, 27, 17, 27,
       17, 27, 17, 27,  1, 17, 27, 17, 27, 17, 27, 17, 27,  0, 17, 27, 17,
       27, 17, 27, 17, 27,  1,  1, 17, 27,  1, 17, 27, 17, 27, 17, 27, 17,
       27,  1,  1, 17, 27, 17, 27,  0, 17, 27,  1,  1, 17, 27, 17, 27,  1,
       17, 27,  1, 10, 20,  0,  1, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,
       17, 27,  0,  1, 17, 27, 17, 27, 17, 27,  1,  1, 19, 29,  0, 17, 27,
        0, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,  1, 17, 27,  1,
       17, 27, 17, 27, 17, 27,  1, 17, 27, 17, 27, 17, 27,  1,  0,  1, 17,
       27, 17, 27, 17, 27,  0, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27, 17,
       27, 17, 27,  1, 14, 24,  1, 17, 27,  1, 17, 27, 17, 27,  1, 10, 20,
       17, 27,  1,  1, 17, 27,  1, 10, 20, 17, 27,  0,  1,  1, 17, 27, 17,
       27, 17, 27, 17, 27,  0, 14, 24,  1, 16, 26,  1,  1,  1, 17, 27, 17,
       27, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,  1, 17, 27, 17, 27,  0,
       14, 24,  0, 17, 27,  1,  0, 17, 27, 17, 27, 17, 27,  1, 17, 27, 17,
       27, 10, 20,  1,  1, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,  1, 17,
       27,  1, 17, 27, 17, 27, 17, 27,  1, 17, 27, 17, 27, 17, 27, 17, 27,
        1, 14, 24,  1,  1,  1, 17, 27, 17, 27, 17, 27, 17, 27, 17, 27,  1,
        1,  1, 13, 23,  1, 17, 27, 17, 27, 17, 27, 17, 27,  1,  1,  1, 12,
       22, 17, 27, 17, 27,  1, 17, 27, 17, 27, 17, 27,  0, 17, 27,  1, 17,
       27], dtype=int64))
Google Playstore:
df1=pd.read_csv("Cleaned Google Play Store Dataset.csv")
df1.head(2)
Unnamed: 0	App	Category	Rating	Reviews	Size	Installs	Type	Price	Content Rating	Genres	Last Updated	Current Ver	Android Ver	Day	Month	Year
0	0	Photo Editor & Candy Camera & Grid & ScrapBook	ART_AND_DESIGN	4.1	159	19000.0	10000	Free	0.0	Everyone	Art & Design	2018-01-07	1.0.0	4.0.3 and up	7	1	2018
1	1	Coloring book moana	ART_AND_DESIGN	3.9	967	14000.0	500000	Free	0.0	Everyone	Art & Design;Pretend Play	2018-01-15	2.0.0	4.0.3 and up	15	1	2018
'''Q9. Load the Google Playstore dataset and examine its dimensions. How many rows and columns does
the dataset have?'''
print(f'The dataset consist of respective rows and columns {df1.shape}')
The dataset consist of respective rows and columns (10840, 17)
'''Q10. How does the rating of apps vary by category? Create a boxplot to compare the ratings of different
app categories.'''
try:
    df1["Rating"].groupby(df1["Category"]).plot(kind="box",figsize=(10,5))
except:
    print("Error")
Error

'''Q11. Are there any missing values in the dataset? Identify any missing values and describe how they may
impact your analysis.'''
df1.isnull().sum()
#Yes there are missing values in the dataset and they may impact our analysis as we can see in the above output
#the missing values are in Rating,Type,Current Ver,Android Ver
#we can drop the missing values but it will affect our analysis so we will replace the missing values with mean,median and mode
#it'll impact by changing the mean,median and mode of the respective columns
Unnamed: 0           0
App                  0
Category             0
Rating            1474
Reviews              0
Size              1695
Installs             0
Type                 1
Price                0
Content Rating       0
Genres               0
Last Updated         0
Current Ver          8
Android Ver          2
Day                  0
Month                0
Year                 0
dtype: int64
'''Q12. What is the relationship between the size of an app and its rating? Create a scatter plot to visualize
the relationship.'''
try:
    df1.plot(kind="scatter",x="Size",y="Rating",figsize=(10,5))
except:
    print("Error")

 
